#+TITLE: Notes on the Theory of Computation
#+OPTIONS: toc:2
#+HTML_MATHJAX: font:'Neo Euler' font-size:0.5em

These are some notes I have put together while taking "Introduction to
the Theory of Computation" in spring 2018 at UNM.

* Automata Theory
Automata theory describes the properties of simple machines that
process strings of symbols. Different kinds of machines can process
different classes of languages. Before discussing machines we need a
definition of a language, an alphabet, and a string.

- alphabet :: a finite set of symbols (typically called \(\Sigma\))
- string :: a finite sequence of symbols from an alphabet[fn:1]
- language :: a set L of strings over some alphabet

By these definitions a language over some alphabet \(\Sigma\) could be
any subset of \(\Sigma^*\). For example, the language \(L_1\) over the
alphabet \(\Sigma = \{a,b\}\) that consists of any non-zero number of
\(a\)s followed by the same number of \(b\)s would be written as \[L_1
= \{a^ib^i \mid \forall i \in \mathbb{N}\}.\] Here are a few more
examples of languages: \[L_2 = \{ w \in \{0,1,2\}^* \mid w =
w_1w_2\ldots w_n. \sum_{i=1}^n w_i \equiv 2 \mod 3\}\] \[L_3 = \{w \in
\{0,1\}^* \mid \text{$w$ contains an even number of 1s}\}\] \[L_4 =
\{w \in \{a,b\}^* \mid \text{$w$ ends in "ab"}\}\] \[L_5 = \{w \in
\{0,1\}^* \mid w_0 \ne 0 \land \text{$w$ is the binary representation of a natural
number less than 50}\}\]

Languages can be finite or infinite, as seen above. Most of the
interesting properties we are concerned with, however, relate to
infinite languages.

** Finite State Automata
A finite state automaton is an abstract machine with a finite set of
states that reads a string one symbol at a time and changes its state
based on the symbol it has read.
** Regular Languages
*** Closure under Complement
*** Closure under Union
*** Closure under Intersection
** Minimal Deterministic Finite Automata

* Footnotes

[fn:1] For a string \(w\) I will use the notation \(w_i\) to refer to
the \(i^{\text{th}}\) symbol in that string.

